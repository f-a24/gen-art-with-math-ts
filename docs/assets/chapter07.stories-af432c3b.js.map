{"version":3,"file":"chapter07.stories-af432c3b.js","sources":["../../src/chapter07.ts"],"sourcesContent":["import p5 from 'p5';\nimport { init } from './common';\n\n/**\n * パスカルの三角形（数値の書き出し）\n */\nexport const pascal = () => {\n  init('パスカルの三角形');\n\n  globalP5Instance = new p5((p: p5) => {\n    const num = 8; // 計算する世代数の上限\n    let state = [1]; // 初期状態\n    let gen = 0; // 世代\n    // 数字を書く関数\n    const _drawNumber = (y: number) => {\n      const scalar = p.width / num; // 数字の大きさ\n      let x = (p.width - state.length * scalar) * 0.5; // 数字を書く位置のx座標\n      y *= scalar;\n      p.fill(0);\n      for (let i = 0; i < state.length; i++) {\n        p.textSize(scalar * 0.5);\n        p.text(state[i], x + scalar * 0.5, y + scalar * 0.5);\n        x += scalar; // 数字を書く位置をx座標方向にずらす\n      }\n    };\n    // 状態を更新する関数\n    const _updateState = () => {\n      const BOUNDARY = [0];\n      const nextState: number[] = []; // 次の世代の状態\n      state = p.splice(state, BOUNDARY, 0); // 配列の最初に境界値を加える\n      state = p.splice(state, BOUNDARY, state.length); // 配列の最後に境界値を加える\n      for (let i = 0; i < state.length - 1; i++) {\n        nextState[i] = _transition(i); // 次世代の状態の計算\n      }\n      state = nextState; // 状態を更新\n      gen++; // 世代を1つ増やす\n    };\n    // 遷移の計算をする関数\n    const _transition = (i: number) => state[i + 1] + state[i]; // パスカルの法則に従った計算\n\n    p.setup = () => {\n      p.createCanvas(500, 500);\n    };\n    p.draw = () => {\n      if (gen < num) {\n        _drawNumber(gen); // 数字を書く\n        _updateState(); // 状態を更新する\n      }\n    };\n  });\n  return '';\n};\n\n/**\n * パスカルの三角形（合同な数による可視化）\n */\nexport const modPascal = () => {\n  init('modを法としたパスカルの三角形');\n\n  globalP5Instance = new p5((p: p5) => {\n    const num = 250;\n    let mod = 2;\n    let state = [1];\n    let gen = 0;\n    // セルを描画する関数\n    const _drawCell = (y: number) => {\n      const scalar = p.width / num; // セルの大きさ\n      let x = (p.width - state.length * scalar) * 0.5; // セルのx座標\n      y *= scalar;\n      p.noStroke();\n      for (let i = 0; i < state.length; i++) {\n        p.fill((state[i] * 1.0) / mod, (state[i] * 1.0) / mod, 1); // 色相にセルの状態を割り当て\n        p.rect(x, y, scalar, scalar); // セルの描画\n        x += scalar; // x座標方向にセルをずらす\n      }\n    };\n    // 状態を更新する関数\n    const _updateState = () => {\n      const BOUNDARY = [0];\n      const nextState: number[] = []; // 次の行の配列\n      state = p.splice(state, BOUNDARY, 0); // 配列stateの最初に{0,0}を加える\n      state = p.splice(state, BOUNDARY, state.length); // 配列stateの最後に{0,0}を加える\n      for (let i = 0; i < state.length - 1; i++) {\n        nextState[i] = _transition(i); // 次世代のセルの状態の計算\n      }\n      state = nextState; // セルの状態を更新\n      gen++;\n    };\n    // 遷移の計算をする関数\n    const _transition = (i: number) => (state[i + 1] + state[i]) % mod; // 遷移規則\n\n    p.setup = () => {\n      p.createCanvas(500, 500);\n      p.colorMode('hsb', 1);\n      p.background(0, 0, 1);\n    };\n    p.draw = () => {\n      if (gen < num) {\n        _drawCell(gen);\n        _updateState();\n      }\n    };\n    p.mouseClicked = () => {\n      gen = 0;\n      state = [1]; // 初期状態\n      mod = Math.trunc(p.random(2, 20));\n      console.log(mod);\n      p.background(0, 0, 1);\n    };\n  });\n  return '';\n};\n\n/**\n * 1次元セルオートマトン\n */\nexport const cA1dim = () => {\n  init('modを法としたセルオートマトン');\n\n  globalP5Instance = new p5((p: p5) => {\n    const num = 250; // 表示する世代数\n    let mod = 2; // 法とする数\n    let state = [1]; // 初期状態\n    let gen = 0;\n    const _drawCell = (y: number) => {\n      const scalar = (p.width * 0.5) / num; // セルの大きさ\n      let x = (p.width - state.length * scalar) * 0.5; // セルのx座標\n      y *= scalar;\n      p.noStroke();\n      for (let i = 0; i < state.length; i++) {\n        p.fill((state[i] * 1.0) / mod, (state[i] * 1.0) / mod, 1); // 色相にセルの状態を割り当て\n        p.rect(x, y, scalar, scalar); // セルの描画\n        x += scalar; // x座標方向にセルをずらす\n      }\n    };\n    // セルの状態を更新する関数\n    const _updateState = () => {\n      const BOUNDARY = [0, 0];\n      const nextState: number[] = []; // 次の世代の状態\n      state = p.splice(state, BOUNDARY, 0); // 配列の最初に境界値を加える\n      state = p.splice(state, BOUNDARY, state.length); // 配列の最後に境界値を加える\n      for (let i = 1; i < state.length - 1; i++) {\n        nextState[i - 1] = _transition(state[i - 1], state[i], state[i + 1]); // 次世代のセルの状態の計算\n      }\n      state = nextState; // セルの状態を更新\n      gen++; // 世代を1つ増やす\n    };\n    // 遷移の計算をする関数\n    const _transition = (a: number, b: number, c: number) => {\n      let d = a + b + c; // 遷移ルールに従って計算\n      d = d % mod;\n      return d;\n    };\n\n    p.setup = () => {\n      p.createCanvas(500, 500);\n      p.colorMode('hsb', 1);\n      p.background(0, 0, 1);\n    };\n    p.draw = () => {\n      if (gen < num) {\n        _drawCell(gen);\n        _updateState();\n      }\n    };\n    p.mouseClicked = () => {\n      gen = 0;\n      state = [1]; // 初期状態\n      mod = Math.trunc(p.random(2, 20));\n      console.log(mod);\n      p.background(0, 0, 1);\n    };\n  });\n  return '';\n};\n\n/**\n * 確率的なセルオートマトン\n */\nexport const stochCA = () => {\n  init('99.9%の確率でルールA、0.1%の確率でルールBを選ぶセルオートマトン');\n\n  globalP5Instance = new p5((p: p5) => {\n    const num = 250; // 表示する世代数\n    let mod = 2; // 法とする数\n    let state = [1]; // 初期状態\n    let gen = 0;\n    const _drawCell = (y: number) => {\n      const scalar = (p.width * 0.5) / num; // セルの大きさ\n      let x = (p.width - state.length * scalar) * 0.5; // セルのx座標\n      y *= scalar;\n      p.noStroke();\n      for (let i = 0; i < state.length; i++) {\n        p.fill((state[i] * 1.0) / mod, (state[i] * 1.0) / mod, 1); // 色相にセルの状態を割り当て\n        p.rect(x, y, scalar, scalar); // セルの描画\n        x += scalar; // x座標方向にセルをずらす\n      }\n    };\n    const _updateState = () => {\n      const BOUNDARY = [0, 0];\n      const nextState: number[] = []; // 次の行の配列\n      state = p.splice(state, BOUNDARY, 0); // 配列stateの最初に{0,0}を加える\n      state = p.splice(state, BOUNDARY, state.length); // 配列stateの最後に{0,0}を加える\n      for (let i = 1; i < state.length - 1; i++) {\n        nextState[i - 1] = _transition(state[i - 1], state[i], state[i + 1]); // 次世代のセルの状態の計算\n      }\n      state = nextState; // セルの状態を更新\n      gen++;\n    };\n    // 確率的に遷移ルールを決定し計算する関数\n    const _transition = (a: number, b: number, c: number) => {\n      let d: number;\n      if (p.random(1) < 0.999) {\n        d = a + b + c; // 99.9%の確率でこのルールを選択\n      } else {\n        d = a + c; // 0.1%の確率でこのルールを選択\n      }\n      d = d % mod;\n      return d;\n    };\n\n    p.setup = () => {\n      p.createCanvas(500, 500);\n      p.colorMode('hsb', 1);\n      p.background(0, 0, 1);\n    };\n    p.draw = () => {\n      if (gen < num) {\n        _drawCell(gen);\n        _updateState();\n      }\n    };\n    p.mouseClicked = () => {\n      gen = 0;\n      state = [1]; // 初期状態\n      mod = Math.trunc(p.random(2, 20));\n      console.log(mod);\n      p.background(0, 0, 1);\n    };\n  });\n  return '';\n};\n\n/**\n * 基本セルオートマトン\n */\nexport const elemCA = () => {\n  init('複雑なパターンを生み出す基本セルオートマトン');\n\n  globalP5Instance = new p5((p: p5) => {\n    const num = 250; // 表示する世代数\n    let state = [1]; // 初期状態\n    let rule = [0, 0, 0, 1, 1, 1, 1, 0];\n    let gen = 0;\n    const _drawCell = (y: number) => {\n      const scalar = (p.width * 0.5) / num; // セルの大きさ\n      let x = (p.width - state.length * scalar) * 0.5; // セルのx座標\n      y *= scalar;\n      p.noStroke();\n      for (let i = 0; i < state.length; i++) {\n        p.fill(0, 0, 1 - state[i]); // 色相にセルの状態を割り当て\n        p.rect(x, y, scalar, scalar); // セルの描画\n        x += scalar; // x座標方向にセルをずらす\n      }\n    };\n    const _updateState = () => {\n      const BOUNDARY = [0, 0];\n      const nextState: number[] = []; // 次の行の配列\n      state = p.splice(state, BOUNDARY, 0); // 配列stateの最初に{0,0}を加える\n      state = p.splice(state, BOUNDARY, state.length); // 配列stateの最後に{0,0}を加える\n      for (let i = 1; i < state.length - 1; i++) {\n        nextState[i - 1] = _transition(state[i - 1], state[i], state[i + 1]); // 次世代のセルの状態の計算\n      }\n      state = nextState; // セルの状態を更新\n      gen++;\n    };\n    // 基本セルオートマトンの遷移の計算をする関数\n    // 8個の01要素からなる配列ruleに対して，遷移ルールを決定する\n    const _transition = (a: number, b: number, c: number) => {\n      let d: number;\n      // abcを10進数に置き換える\n      const ruleInt = Math.trunc(\n        a * p.pow(2, 2) + b * p.pow(2, 1) + c * p.pow(2, 0)\n      );\n      d = rule[7 - ruleInt];\n      return d;\n    };\n\n    p.setup = () => {\n      p.createCanvas(500, 500);\n      p.colorMode('hsb', 1);\n    };\n    p.draw = () => {\n      if (gen < num) {\n        _drawCell(gen);\n        _updateState();\n      }\n    };\n    p.mouseClicked = () => {\n      gen = 0;\n      state = [1]; // 初期状態\n      rule = [];\n      let ruleInt = 0;\n      for (let i = 0; i < 8; i++) {\n        rule[i] = Math.trunc(p.random(2));\n        ruleInt += rule[i] * Math.trunc(p.pow(2, 7 - i));\n      }\n      console.log(ruleInt);\n      p.background(0, 0, 1);\n    };\n  });\n  return '';\n};\n\n/**\n * 2次元セルオートマトン\n */\nexport const cA2dim = () => {\n  init('2次元セルオートマトン');\n\n  globalP5Instance = new p5((p: p5) => {\n    const num = 250; // 行と列の長さ\n    let mod = 4; // 法とする数\n    let state: number[][] = []; // セルの状態を表す行列\n    // 初期状態にする関数\n    const _initialize = () => {\n      state = [];\n      for (let i = 0; i < num; i++) {\n        const _arr: number[] = [];\n        for (let j = 0; j < num; j++) {\n          if (i === num / 2 && j === num / 2) {\n            _arr.push(1); // 真ん中の成分のみ1\n          } else {\n            _arr.push(0);\n          }\n        }\n        state.push(_arr);\n      }\n    };\n    const _drawCell = () => {\n      const scalar = p.height / num; // セルのサイズ\n      let y = 0; // セルのy座標\n      let x: number = 0;\n      for (let i = 0; i < num; i++) {\n        x = 0; // セルのx座標\n        for (let j = 0; j < num; j++) {\n          p.noStroke();\n          p.fill((state[i][j] * 1.0) / mod, (state[i][j] * 1.0) / mod, 1); // セルの色\n          p.rect(x, y, scalar, scalar);\n          x += scalar;\n        }\n        y += scalar;\n      }\n    };\n    // 状態を更新する関数\n    const _updateState = () => {\n      const nextState: number[][] = []; // 次世代の状態\n      for (let i = 0; i < num; i++) {\n        const _arr: number[] = [];\n        for (let j = 0; j < num; j++) {\n          _arr.push(_transition(i, j)); // 遷移\n        }\n        nextState.push(_arr);\n      }\n      state = structuredClone(nextState); // 更新\n    };\n    // 遷移の計算をする関数\n    const _transition = (i: number, j: number) => {\n      let nextC =\n        state[(i - 1 + num) % num][j] + // 上のセル\n        state[i][(j - 1 + num) % num] + // 左のセル\n        state[i][j] + // 中央のセル\n        state[i][(j + 1) % num] + // 右のセル\n        state[(i + 1) % num][j]; // 下のセル\n      nextC = nextC % mod;\n      return nextC;\n    };\n\n    p.setup = () => {\n      p.createCanvas(500, 500);\n      p.colorMode('hsb', 1);\n      _initialize(); // 初期化する\n      p.frameRate(2); // 0.5秒ごとに遷移\n    };\n    p.draw = () => {\n      _drawCell();\n      _updateState();\n    };\n    p.mouseClicked = () => {\n      _initialize();\n      mod = Math.trunc(p.random(2, 20));\n      console.log(mod);\n      p.background(0, 0, 1);\n    };\n  });\n  return '';\n};\n"],"names":["pascal","init","p5","p","state","gen","_drawNumber","y","scalar","x","i","_updateState","BOUNDARY","nextState","_transition","modPascal","mod","_drawCell","cA1dim","a","b","c","d","stochCA","elemCA","rule","ruleInt","cA2dim","_initialize","_arr","j","nextC"],"mappings":"kFAMO,MAAMA,EAAS,KACpBC,EAAK,UAAU,EAEI,iBAAA,IAAIC,EAAIC,GAAU,CAE/B,IAAAC,EAAQ,CAAC,CAAC,EACVC,EAAM,EAEJ,MAAAC,EAAeC,GAAc,CAC3B,MAAAC,EAASL,EAAE,MAAQ,EACzB,IAAIM,GAAKN,EAAE,MAAQC,EAAM,OAASI,GAAU,GACvCD,GAAAC,EACLL,EAAE,KAAK,CAAC,EACR,QAASO,EAAI,EAAGA,EAAIN,EAAM,OAAQM,IAC9BP,EAAA,SAASK,EAAS,EAAG,EACrBL,EAAA,KAAKC,EAAMM,CAAC,EAAGD,EAAID,EAAS,GAAKD,EAAIC,EAAS,EAAG,EAC9CC,GAAAD,CACP,EAGIG,EAAe,IAAM,CACnB,MAAAC,EAAW,CAAC,CAAC,EACbC,EAAsB,CAAA,EAC5BT,EAAQD,EAAE,OAAOC,EAAOQ,EAAU,CAAC,EACnCR,EAAQD,EAAE,OAAOC,EAAOQ,EAAUR,EAAM,MAAM,EAC9C,QAASM,EAAI,EAAGA,EAAIN,EAAM,OAAS,EAAGM,IAC1BG,EAAAH,CAAC,EAAII,EAAYJ,CAAC,EAEtBN,EAAAS,EACRR,GAAA,EAGIS,EAAeJ,GAAcN,EAAMM,EAAI,CAAC,EAAIN,EAAMM,CAAC,EAEzDP,EAAE,MAAQ,IAAM,CACZA,EAAA,aAAa,IAAK,GAAG,CAAA,EAEzBA,EAAE,KAAO,IAAM,CACTE,EAAM,IACRC,EAAYD,CAAG,EACFM,IACf,CACF,CACD,EACM,IAMII,EAAY,KACvBd,EAAK,kBAAkB,EAEJ,iBAAA,IAAIC,EAAIC,GAAU,CAEnC,IAAIa,EAAM,EACNZ,EAAQ,CAAC,CAAC,EACVC,EAAM,EAEJ,MAAAY,EAAaV,GAAc,CACzB,MAAAC,EAASL,EAAE,MAAQ,IACzB,IAAIM,GAAKN,EAAE,MAAQC,EAAM,OAASI,GAAU,GACvCD,GAAAC,EACLL,EAAE,SAAS,EACX,QAASO,EAAI,EAAGA,EAAIN,EAAM,OAAQM,IAC9BP,EAAA,KAAMC,EAAMM,CAAC,EAAI,EAAOM,EAAMZ,EAAMM,CAAC,EAAI,EAAOM,EAAK,CAAC,EACxDb,EAAE,KAAKM,EAAGF,EAAGC,EAAQA,CAAM,EACtBC,GAAAD,CACP,EAGIG,EAAe,IAAM,CACnB,MAAAC,EAAW,CAAC,CAAC,EACbC,EAAsB,CAAA,EAC5BT,EAAQD,EAAE,OAAOC,EAAOQ,EAAU,CAAC,EACnCR,EAAQD,EAAE,OAAOC,EAAOQ,EAAUR,EAAM,MAAM,EAC9C,QAASM,EAAI,EAAGA,EAAIN,EAAM,OAAS,EAAGM,IAC1BG,EAAAH,CAAC,EAAII,EAAYJ,CAAC,EAEtBN,EAAAS,EACRR,GAAA,EAGIS,EAAeJ,IAAeN,EAAMM,EAAI,CAAC,EAAIN,EAAMM,CAAC,GAAKM,EAE/Db,EAAE,MAAQ,IAAM,CACZA,EAAA,aAAa,IAAK,GAAG,EACrBA,EAAA,UAAU,MAAO,CAAC,EAClBA,EAAA,WAAW,EAAG,EAAG,CAAC,CAAA,EAEtBA,EAAE,KAAO,IAAM,CACTE,EAAM,MACRY,EAAUZ,CAAG,EACAM,IACf,EAEFR,EAAE,aAAe,IAAM,CACfE,EAAA,EACND,EAAQ,CAAC,CAAC,EACVY,EAAM,KAAK,MAAMb,EAAE,OAAO,EAAG,EAAE,CAAC,EAChC,QAAQ,IAAIa,CAAG,EACbb,EAAA,WAAW,EAAG,EAAG,CAAC,CAAA,CACtB,CACD,EACM,IAMIe,EAAS,KACpBjB,EAAK,kBAAkB,EAEJ,iBAAA,IAAIC,EAAIC,GAAU,CAEnC,IAAIa,EAAM,EACNZ,EAAQ,CAAC,CAAC,EACVC,EAAM,EACJ,MAAAY,EAAaV,GAAc,CACzB,MAAAC,EAAUL,EAAE,MAAQ,GAAO,IACjC,IAAIM,GAAKN,EAAE,MAAQC,EAAM,OAASI,GAAU,GACvCD,GAAAC,EACLL,EAAE,SAAS,EACX,QAASO,EAAI,EAAGA,EAAIN,EAAM,OAAQM,IAC9BP,EAAA,KAAMC,EAAMM,CAAC,EAAI,EAAOM,EAAMZ,EAAMM,CAAC,EAAI,EAAOM,EAAK,CAAC,EACxDb,EAAE,KAAKM,EAAGF,EAAGC,EAAQA,CAAM,EACtBC,GAAAD,CACP,EAGIG,EAAe,IAAM,CACnB,MAAAC,EAAW,CAAC,EAAG,CAAC,EAChBC,EAAsB,CAAA,EAC5BT,EAAQD,EAAE,OAAOC,EAAOQ,EAAU,CAAC,EACnCR,EAAQD,EAAE,OAAOC,EAAOQ,EAAUR,EAAM,MAAM,EAC9C,QAASM,EAAI,EAAGA,EAAIN,EAAM,OAAS,EAAGM,IACpCG,EAAUH,EAAI,CAAC,EAAII,EAAYV,EAAMM,EAAI,CAAC,EAAGN,EAAMM,CAAC,EAAGN,EAAMM,EAAI,CAAC,CAAC,EAE7DN,EAAAS,EACRR,GAAA,EAGIS,EAAc,CAACK,EAAWC,EAAWC,IAAc,CACnD,IAAAC,EAAIH,EAAIC,EAAIC,EAChB,OAAAC,EAAIA,EAAIN,EACDM,CAAA,EAGTnB,EAAE,MAAQ,IAAM,CACZA,EAAA,aAAa,IAAK,GAAG,EACrBA,EAAA,UAAU,MAAO,CAAC,EAClBA,EAAA,WAAW,EAAG,EAAG,CAAC,CAAA,EAEtBA,EAAE,KAAO,IAAM,CACTE,EAAM,MACRY,EAAUZ,CAAG,EACAM,IACf,EAEFR,EAAE,aAAe,IAAM,CACfE,EAAA,EACND,EAAQ,CAAC,CAAC,EACVY,EAAM,KAAK,MAAMb,EAAE,OAAO,EAAG,EAAE,CAAC,EAChC,QAAQ,IAAIa,CAAG,EACbb,EAAA,WAAW,EAAG,EAAG,CAAC,CAAA,CACtB,CACD,EACM,IAMIoB,EAAU,KACrBtB,EAAK,uCAAuC,EAEzB,iBAAA,IAAIC,EAAIC,GAAU,CAEnC,IAAIa,EAAM,EACNZ,EAAQ,CAAC,CAAC,EACVC,EAAM,EACJ,MAAAY,EAAaV,GAAc,CACzB,MAAAC,EAAUL,EAAE,MAAQ,GAAO,IACjC,IAAIM,GAAKN,EAAE,MAAQC,EAAM,OAASI,GAAU,GACvCD,GAAAC,EACLL,EAAE,SAAS,EACX,QAASO,EAAI,EAAGA,EAAIN,EAAM,OAAQM,IAC9BP,EAAA,KAAMC,EAAMM,CAAC,EAAI,EAAOM,EAAMZ,EAAMM,CAAC,EAAI,EAAOM,EAAK,CAAC,EACxDb,EAAE,KAAKM,EAAGF,EAAGC,EAAQA,CAAM,EACtBC,GAAAD,CACP,EAEIG,EAAe,IAAM,CACnB,MAAAC,EAAW,CAAC,EAAG,CAAC,EAChBC,EAAsB,CAAA,EAC5BT,EAAQD,EAAE,OAAOC,EAAOQ,EAAU,CAAC,EACnCR,EAAQD,EAAE,OAAOC,EAAOQ,EAAUR,EAAM,MAAM,EAC9C,QAASM,EAAI,EAAGA,EAAIN,EAAM,OAAS,EAAGM,IACpCG,EAAUH,EAAI,CAAC,EAAII,EAAYV,EAAMM,EAAI,CAAC,EAAGN,EAAMM,CAAC,EAAGN,EAAMM,EAAI,CAAC,CAAC,EAE7DN,EAAAS,EACRR,GAAA,EAGIS,EAAc,CAACK,EAAWC,EAAWC,IAAc,CACnD,IAAAC,EACJ,OAAInB,EAAE,OAAO,CAAC,EAAI,KAChBmB,EAAIH,EAAIC,EAAIC,EAEZC,EAAIH,EAAIE,EAEVC,EAAIA,EAAIN,EACDM,CAAA,EAGTnB,EAAE,MAAQ,IAAM,CACZA,EAAA,aAAa,IAAK,GAAG,EACrBA,EAAA,UAAU,MAAO,CAAC,EAClBA,EAAA,WAAW,EAAG,EAAG,CAAC,CAAA,EAEtBA,EAAE,KAAO,IAAM,CACTE,EAAM,MACRY,EAAUZ,CAAG,EACAM,IACf,EAEFR,EAAE,aAAe,IAAM,CACfE,EAAA,EACND,EAAQ,CAAC,CAAC,EACVY,EAAM,KAAK,MAAMb,EAAE,OAAO,EAAG,EAAE,CAAC,EAChC,QAAQ,IAAIa,CAAG,EACbb,EAAA,WAAW,EAAG,EAAG,CAAC,CAAA,CACtB,CACD,EACM,IAMIqB,EAAS,KACpBvB,EAAK,wBAAwB,EAEV,iBAAA,IAAIC,EAAIC,GAAU,CAE/B,IAAAC,EAAQ,CAAC,CAAC,EACVqB,EAAO,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,CAAC,EAC9BpB,EAAM,EACJ,MAAAY,EAAaV,GAAc,CACzB,MAAAC,EAAUL,EAAE,MAAQ,GAAO,IACjC,IAAIM,GAAKN,EAAE,MAAQC,EAAM,OAASI,GAAU,GACvCD,GAAAC,EACLL,EAAE,SAAS,EACX,QAASO,EAAI,EAAGA,EAAIN,EAAM,OAAQM,IAChCP,EAAE,KAAK,EAAG,EAAG,EAAIC,EAAMM,CAAC,CAAC,EACzBP,EAAE,KAAKM,EAAGF,EAAGC,EAAQA,CAAM,EACtBC,GAAAD,CACP,EAEIG,EAAe,IAAM,CACnB,MAAAC,EAAW,CAAC,EAAG,CAAC,EAChBC,EAAsB,CAAA,EAC5BT,EAAQD,EAAE,OAAOC,EAAOQ,EAAU,CAAC,EACnCR,EAAQD,EAAE,OAAOC,EAAOQ,EAAUR,EAAM,MAAM,EAC9C,QAASM,EAAI,EAAGA,EAAIN,EAAM,OAAS,EAAGM,IACpCG,EAAUH,EAAI,CAAC,EAAII,EAAYV,EAAMM,EAAI,CAAC,EAAGN,EAAMM,CAAC,EAAGN,EAAMM,EAAI,CAAC,CAAC,EAE7DN,EAAAS,EACRR,GAAA,EAIIS,EAAc,CAACK,EAAWC,EAAWC,IAAc,CACnD,IAAAC,EAEJ,MAAMI,EAAU,KAAK,MACnBP,EAAIhB,EAAE,IAAI,EAAG,CAAC,EAAIiB,EAAIjB,EAAE,IAAI,EAAG,CAAC,EAAIkB,EAAIlB,EAAE,IAAI,EAAG,CAAC,CAAA,EAEhD,OAAAmB,EAAAG,EAAK,EAAIC,CAAO,EACbJ,CAAA,EAGTnB,EAAE,MAAQ,IAAM,CACZA,EAAA,aAAa,IAAK,GAAG,EACrBA,EAAA,UAAU,MAAO,CAAC,CAAA,EAEtBA,EAAE,KAAO,IAAM,CACTE,EAAM,MACRY,EAAUZ,CAAG,EACAM,IACf,EAEFR,EAAE,aAAe,IAAM,CACfE,EAAA,EACND,EAAQ,CAAC,CAAC,EACVqB,EAAO,CAAA,EACP,IAAIC,EAAU,EACd,QAAShB,EAAI,EAAGA,EAAI,EAAGA,IACrBe,EAAKf,CAAC,EAAI,KAAK,MAAMP,EAAE,OAAO,CAAC,CAAC,EACrBuB,GAAAD,EAAKf,CAAC,EAAI,KAAK,MAAMP,EAAE,IAAI,EAAG,EAAIO,CAAC,CAAC,EAEjD,QAAQ,IAAIgB,CAAO,EACjBvB,EAAA,WAAW,EAAG,EAAG,CAAC,CAAA,CACtB,CACD,EACM,IAMIwB,EAAS,KACpB1B,EAAK,aAAa,EAEC,iBAAA,IAAIC,EAAIC,GAAU,CAEnC,IAAIa,EAAM,EACNZ,EAAoB,CAAA,EAExB,MAAMwB,EAAc,IAAM,CACxBxB,EAAQ,CAAA,EACR,QAASM,EAAI,EAAGA,EAAI,IAAKA,IAAK,CAC5B,MAAMmB,EAAiB,CAAA,EACvB,QAASC,EAAI,EAAGA,EAAI,IAAKA,IACnBpB,IAAM,IAAM,GAAKoB,IAAM,IAAM,EAC/BD,EAAK,KAAK,CAAC,EAEXA,EAAK,KAAK,CAAC,EAGfzB,EAAM,KAAKyB,CAAI,EACjB,EAEIZ,EAAY,IAAM,CAChB,MAAAT,EAASL,EAAE,OAAS,IAC1B,IAAII,EAAI,EACJE,EAAY,EAChB,QAASC,EAAI,EAAGA,EAAI,IAAKA,IAAK,CACxBD,EAAA,EACJ,QAASqB,EAAI,EAAGA,EAAI,IAAKA,IACvB3B,EAAE,SAAS,EACXA,EAAE,KAAMC,EAAMM,CAAC,EAAEoB,CAAC,EAAI,EAAOd,EAAMZ,EAAMM,CAAC,EAAEoB,CAAC,EAAI,EAAOd,EAAK,CAAC,EAC9Db,EAAE,KAAKM,EAAGF,EAAGC,EAAQA,CAAM,EACtBC,GAAAD,EAEFD,GAAAC,EACP,EAGIG,EAAe,IAAM,CACzB,MAAME,EAAwB,CAAA,EAC9B,QAASH,EAAI,EAAGA,EAAI,IAAKA,IAAK,CAC5B,MAAMmB,EAAiB,CAAA,EACvB,QAASC,EAAI,EAAGA,EAAI,IAAKA,IACvBD,EAAK,KAAKf,EAAYJ,EAAGoB,CAAC,CAAC,EAE7BjB,EAAU,KAAKgB,CAAI,EAErBzB,EAAQ,gBAAgBS,CAAS,CAAA,EAG7BC,EAAc,CAACJ,EAAWoB,IAAc,CAC5C,IAAIC,EACF3B,GAAOM,EAAI,EAAI,KAAO,GAAG,EAAEoB,CAAC,EAC5B1B,EAAMM,CAAC,GAAGoB,EAAI,EAAI,KAAO,GAAG,EAC5B1B,EAAMM,CAAC,EAAEoB,CAAC,EACV1B,EAAMM,CAAC,GAAGoB,EAAI,GAAK,GAAG,EACtB1B,GAAOM,EAAI,GAAK,GAAG,EAAEoB,CAAC,EACxB,OAAAC,EAAQA,EAAQf,EACTe,CAAA,EAGT5B,EAAE,MAAQ,IAAM,CACZA,EAAA,aAAa,IAAK,GAAG,EACrBA,EAAA,UAAU,MAAO,CAAC,EACRyB,IACZzB,EAAE,UAAU,CAAC,CAAA,EAEfA,EAAE,KAAO,IAAM,CACHc,IACGN,GAAA,EAEfR,EAAE,aAAe,IAAM,CACTyB,IACZZ,EAAM,KAAK,MAAMb,EAAE,OAAO,EAAG,EAAE,CAAC,EAChC,QAAQ,IAAIa,CAAG,EACbb,EAAA,WAAW,EAAG,EAAG,CAAC,CAAA,CACtB,CACD,EACM;;;;;;;;;;;;"}
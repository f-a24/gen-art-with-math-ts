{"version":3,"file":"chapter02.stories-10a2f2fe.js","sources":["../../src/chapter02.ts"],"sourcesContent":["import p5 from 'p5';\nimport { GUI } from 'lil-gui';\nimport { init } from '../src/common';\n\n/**\n * divRectによる分割の細部を拡大表示する\n */\nexport const divRectZoom = () => {\n  init('Div Rectによる分割の細部を拡大表示する');\n\n  globalP5Instance = new p5((p: p5) => {\n    const ratio = p.sqrt(2);\n    p.setup = () => {\n      p.createCanvas(500, 353);\n      p.colorMode(p.HSB, 1);\n    };\n    p.draw = () => {\n      p.background(0, 0, 1);\n      const scalar = p.pow(50, (p.mouseX * 1.0) / p.width) * p.width;\n      // マウスのカーソルのX座標によって長方形を1～50倍まで拡大する\n      _divRect(p.width - scalar, p.height - scalar / ratio, scalar); // 長方形を分割\n    };\n    const _divRect = (xPos: number, yPos: number, wd: number) => {\n      let itr = 0;\n      const xEndPos = xPos + wd;\n      const yEndPos = yPos + wd / ratio;\n      while (wd > 0.1) {\n        itr++;\n        p.fill(p.color((itr * ratio) % 1, 1, 1)); // 色を指定\n        if (itr % 2 === 0) {\n          while (xPos + wd < xEndPos + 0.1) {\n            p.rect(xPos, yPos, wd, wd);\n            xPos += wd;\n          }\n          wd = xEndPos - xPos;\n        } else {\n          while (yPos + wd < yEndPos + 0.1) {\n            p.rect(xPos, yPos, wd, wd);\n            yPos += wd;\n          }\n          wd = yEndPos - yPos;\n        }\n      }\n    };\n  });\n  return '';\n};\n\n/**\n * 黄金分割を使ってモンドリアンもどきの絵を描く\n */\nexport const mondrian = () => {\n  init('モンドリアンもどきの生成');\n\n  globalP5Instance = new p5((p: p5) => {\n    const ratio = (p.sqrt(5) + 1) / 2; // 黄金数\n    let thr = 80; // 分割する大きさに関するしきい値\n    let thr2 = 0.5; // 確率を決定するしきい値\n    p.setup = () => {\n      p.createCanvas(500, 500);\n      p.textSize(24);\n      p.text('長方形の分割によるユークリッド互除法の可視化', 10, 30);\n      p.colorMode(p.HSB, 1);\n      _colorRect(0, 0, p.width, p.width);\n      _divSquare(0, 0, p.width);\n    };\n    p.mouseClicked = () => {\n      thr = p.int(p.random(10, 300));\n      thr2 = p.random(0, 1);\n      console.log('thr =', thr, 'thr2 =', thr2);\n      _colorRect(0, 0, p.width, p.width);\n      _divSquare(0, 0, p.width);\n    };\n    const _colorRect = (xPos: number, yPos: number, wd: number, ht: number) => {\n      let col: p5.Color;\n      const val = p.random(1);\n\n      // 15%の確率\n      if (val < 0.15) col = p.color(0, 1, 1); // 赤\n      // 15%の確率\n      else if (val < 0.3) col = p.color(2.0 / 3, 1, 1); // 青\n      // 15%の確率\n      else if (val < 0.45) col = p.color(1.0 / 6, 1, 1); // 黄\n      // 5%の確率\n      else if (val < 0.5) col = p.color(0, 1, 0); // 黒\n      // 20%の確率\n      else if (val < 0.7) col = p.color(0, 0, 0.9); // 灰\n      // 30%の確率\n      else col = p.color(0, 0, 1); // 白\n\n      p.fill(col);\n      p.strokeWeight(5); // 長方形の枠線の太さ\n      p.rect(xPos, yPos, wd, ht);\n    };\n    const _divRect = (xPos: number, yPos: number, wd: number) => {\n      // 長方形を分割する関数\n      let itr = 0;\n      const xEndPos = xPos + wd; // 長方形の横の長さ\n      const yEndPos = yPos + wd / ratio; // 長方形の縦の長さ\n      while (wd > thr) {\n        // wdがしきい値以上の場合に処理を行う\n        itr++;\n        if (itr % 2 === 0) {\n          while (xPos + wd < xEndPos + 0.1) {\n            _colorRect(xPos, yPos, wd, wd); // 正方形を描く\n            if (p.random(1) < thr2) _divSquare(xPos, yPos, wd); // 正方形を分割する関数の呼び出し\n            xPos += wd;\n          }\n          wd = xEndPos - xPos;\n        } else {\n          while (yPos + wd < yEndPos + 0.1) {\n            _colorRect(xPos, yPos, wd, wd); // 正方形を描く\n            if (p.random(1) < thr2) _divSquare(xPos, yPos, wd); // 正方形を分割する関数の呼び出し\n            yPos += wd;\n          }\n          wd = yEndPos - yPos;\n        }\n      }\n    };\n    const _divSquare = (xPos: number, yPos: number, wd: number) => {\n      // 正方形を分割する関数\n      let itr = 0;\n      const xEndPos = wd + xPos; // 正方形の横の長さ\n      const yEndPos = wd + yPos; // 正方形の縦の長さ\n      while (wd > thr) {\n        // 正方形の幅がしきい値以上の場合に実行\n        itr++;\n        if (itr % 2 === 1) {\n          while (xPos + wd * ratio < xEndPos + 0.1) {\n            _colorRect(xPos, yPos, wd * ratio, wd); // 長方形を描く\n            // thr2の確率で再分割\n            if (p.random(1) < thr2) _divRect(xPos, yPos, wd * ratio); // 長方形を分割する関数の呼び出し\n            xPos += wd * ratio;\n          }\n          wd = xEndPos - xPos;\n        } else {\n          while (yPos + wd / ratio < yEndPos + 0.1) {\n            _colorRect(xPos, yPos, wd, wd / ratio); // 長方形を描く\n            // thr2の確率で再分割\n            if (p.random(1) < thr2) _divRect(xPos, yPos, wd); // 長方形を分割する関数の呼び出し\n            yPos += wd / ratio;\n          }\n          wd = yEndPos - yPos;\n        }\n      }\n    };\n  });\n  return '';\n};\n\n/**\n * 再起的な黄金分割のGUIプログラム\n */\nexport const goldDivGUI = () => {\n  init('再起的な黄金分割のGUIプログラム');\n\n  globalP5Instance = new p5((p: p5) => {\n    let ratio: number;\n    let rand1: number[];\n    let rand2: number[];\n    let count: number;\n    const controls = {\n      thr: 100,\n      thr2: 0.5,\n      changeCol() {\n        for (let i = 0; i < rand1.length; i++) {\n          rand1[i] = p.random(1); // ランダムに数を選んで配列の要素を書き換える\n          rand2[i] = p.random(1);\n        }\n      },\n      mond: false\n    };\n\n    const _controller = () => {\n      gui = new GUI();\n      gui.add(controls, 'thr', 10, 300, 30);\n      gui.add(controls, 'thr2', 0, 1);\n      gui.add(controls, 'changeCol');\n      gui.add(controls, 'mond');\n    };\n    p.setup = () => {\n      p.createCanvas(500, 500);\n      p.colorMode(p.HSB, 1);\n      _controller(); // controller関数を呼び出し\n      rand1 = [0]; // 0個の配列を生成\n      rand2 = [0];\n    };\n    p.draw = () => {\n      p.background(1, 0, 1);\n      ratio = (1 + p.sqrt(5)) / 2;\n      count = 0;\n      if (ratio !== 1) {\n        _colRect(0, 0, p.width, p.width);\n        _divSq(0, 0, p.width);\n      }\n    };\n    const _colRect = (x: number, y: number, z: number, w: number) => {\n      if (rand1.length <= count) {\n        rand1 = p.append(rand1, p.random(1)); // ランダムに選んだ数を新しい要素として配列hに加える\n        rand2 = p.append(rand2, p.random(1)); // ランダムに選んだ数を新しい要素として配列hに加える\n      }\n      if (controls.mond) _mondCol(rand2[count]);\n      else {\n        p.fill(p.color(rand2[count], 1, 1));\n        p.strokeWeight(1);\n      }\n\n      p.rect(x, y, z, w);\n      count++;\n    };\n    const _mondCol = (val: number) => {\n      let col = p.color(0, 0, 1); // 白\n      if (val < 0.15) col = p.color(0, 1, 1); // 赤\n      else if (val < 0.3) col = p.color(2.0 / 3, 1, 1); // 青\n      else if (val < 0.45) col = p.color(1.0 / 6, 1, 1); // 黄\n      else if (val < 0.5) col = p.color(0, 1, 0); // 黒\n      else if (val < 0.7) col = p.color(0, 0, 0.9); // 灰\n      p.fill(col);\n      p.strokeWeight(5);\n    };\n    const _divRect = (xPos: number, yPos: number, wd: number) => {\n      // 長方形を分割する関数\n      let itr = 0;\n      const xEndPos = xPos + wd; // 長方形の横の長さ\n      const yEndPos = yPos + wd / ratio; // 長方形の縦の長さ\n      while (wd > controls.thr) {\n        // wdがしきい値以上の場合に処理を行う\n        itr++;\n        if (itr % 2 === 0) {\n          while (xPos + wd < xEndPos + 0.1) {\n            _colRect(xPos, yPos, wd, wd); // 正方形を描く\n            if (rand1[count - 1] > controls.thr2) _divSq(xPos, yPos, wd); // 正方形を分割する関数の呼び出し\n            xPos += wd;\n          }\n          wd = xEndPos - xPos;\n        } else {\n          while (yPos + wd < yEndPos + 0.1) {\n            _colRect(xPos, yPos, wd, wd); // 正方形を描く\n            if (rand1[count - 1] > controls.thr2) _divSq(xPos, yPos, wd); // 正方形を分割する関数の呼び出し\n            yPos += wd;\n          }\n          wd = yEndPos - yPos;\n        }\n      }\n    };\n    const _divSq = (xPos: number, yPos: number, wd: number) => {\n      let itr = 0;\n      const xEndPos = wd + xPos; // 正方形の横の長さ\n      const yEndPos = wd + yPos; // 正方形の縦の長さ\n      while (wd > controls.thr) {\n        // wdがしきい値以上の場合に処理を行う\n        itr++;\n        if (itr % 2 === 1) {\n          while (xPos + wd * ratio < xEndPos + 0.1) {\n            _colRect(xPos, yPos, wd * ratio, wd); // 長方形を描く\n            if (rand1[count - 1] > controls.thr2) {\n              _divRect(xPos, yPos, wd * ratio); // 長方形を分割する関数の呼び出し\n            }\n            xPos += wd * ratio;\n          }\n          wd = xEndPos - xPos;\n        } else {\n          while (yPos + wd / ratio < yEndPos + 0.1) {\n            _colRect(xPos, yPos, wd, wd / ratio); // 長方形を描く\n            if (rand1[count - 1] > controls.thr2) _divRect(xPos, yPos, wd); // 長方形を分割する関数の呼び出し\n            yPos += wd / ratio;\n          }\n          wd = yEndPos - yPos;\n        }\n      }\n    };\n  });\n  return '';\n};\n"],"names":["divRectZoom","init","p5","p","ratio","scalar","_divRect","xPos","yPos","wd","itr","xEndPos","yEndPos","mondrian","thr","thr2","_colorRect","_divSquare","ht","col","val","goldDivGUI","rand1","rand2","count","controls","i","_controller","GUI","_colRect","_divSq","x","y","z","w","_mondCol"],"mappings":"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"}
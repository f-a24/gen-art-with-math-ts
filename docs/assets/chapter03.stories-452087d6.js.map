{"version":3,"file":"chapter03.stories-452087d6.js","sources":["../../src/chapter03.ts"],"sourcesContent":["import p5 from 'p5';\nimport { GUI } from 'lil-gui';\nimport { init } from '../src/common';\n\n/**\n * 循環連分数の収束を可視化する\n */\nexport const convergent = () => {\n  init('循環連分数への収束');\n\n  globalP5Instance = new p5((p: p5) => {\n    p.setup = () => {\n      const m = 1;\n      const num = 10; // 数列の項数\n      let x = m;\n      const alpha = (m + Math.sqrt(m * m + 4)) / 2; // 収束先の循環連分数\n      p.createCanvas(500, 200);\n      const limPos = p.map(alpha, m, m + 1, 0, p.height); // 収束先の位置\n      p.stroke(255, 0, 0); // 漸近線の色(赤)\n      p.line(0, limPos, p.width, limPos); // 漸近線\n      const step = p.width / num; // 数列の項が増加するごとのx位置の増分\n      p.stroke(0); // 数列のグラフの色(黒)\n      // 数列を順に計算し，線分でつなぐ\n      for (let i = 0; i < num; i++) {\n        const nextX = m + 1.0 / x; // 漸化式\n        const pos = p.map(x, m, m + 1, 0, p.height); // i項目の数の位置\n        const nextPos = p.map(nextX, m, m + 1, 0, p.height); // i+1項目の数の位置\n        p.line(i * step, pos, (i + 1) * step, nextPos); // 線分の描画\n        x = nextX; // 次の項を計算するために数を更新\n      }\n    };\n  });\n\n  return '';\n};\n\n/**\n * 正方形の敷き詰めによってフィボナッチ長方形を作る\n */\nexport const square = () => {\n  init('フィボナッチ数列の可視化');\n\n  globalP5Instance = new p5((p: p5) => {\n    let fibo = [0, 1]; // フィボナッチ数列\n    // 正方形を敷き詰める関数\n    const _drawSquare = () => {\n      let xPos = 0; // 正方形のx位置\n      let yPos = 0; // 正方形のy位置\n      const nextFibo = fibo[fibo.length - 2] + fibo[fibo.length - 1]; // 次のフィボナッチ数\n      const scalar = p.width / nextFibo; // 長方形がウィンドウ幅に収まるように拡大\n      p.background(0, 0, 1); // 描画ごとに背景を白く塗りつぶし\n      for (let i = 1; i < fibo.length; i++) {\n        p.fill((0.1 * i) % 1, 1, 1);\n        p.rect(\n          scalar * xPos,\n          scalar * yPos,\n          scalar * fibo[i],\n          scalar * fibo[i]\n        );\n        // 正方形の位置は順にフィボナッチ数を足す・引くことで移動させる\n        if (i % 2 == 1) {\n          // 数列の順番に従って交互に符号を変える\n          xPos += fibo[i];\n          yPos -= fibo[i - 1];\n        } else {\n          xPos -= fibo[i - 1];\n          yPos += fibo[i];\n        }\n      }\n    };\n\n    p.setup = () => {\n      p.createCanvas(500, 500);\n      p.colorMode('hsb', 1);\n      _drawSquare();\n    };\n    p.mouseClicked = () => {\n      const nextFibo = fibo[fibo.length - 2] + fibo[fibo.length - 1]; // 新しいフィボナッチ数を計算\n      fibo = p.append(fibo, nextFibo); // 新しいフィボナッチ数を配列に加える\n      _drawSquare();\n      console.log(nextFibo);\n    };\n  });\n\n  return '';\n};\n\n/**\n * 回り込むように正方形を敷き詰めてフィボナッチ長方形を作る\n */\nexport const squareSpiral = () => {\n  init('正方形の敷き詰めによるフィボナッチ長方形');\n\n  globalP5Instance = new p5((p: p5) => {\n    let fibo = [0, 1, 1];\n    // 正方形を回り込むように敷き詰める関数\n    const _drawSpiral = () => {\n      const SGN = [-1, 1, 1, -1]; // 敷き詰める方向を決める符号\n      let xPos = 0;\n      let yPos = 0;\n      const scalar = p.width / (2 * fibo[fibo.length - 1]); // 拡大・縮小比率\n      p.background(0, 0, 1);\n      p.translate(p.width / 2, p.height / 2); // 描画ウィンドウ中央に移動\n      for (let i = 1; i < fibo.length - 1; i++) {\n        p.fill((0.1 * i) % 1, 1, 1);\n        // 正方形を描く方向を符号の配列に従って変える\n        p.rect(\n          scalar * xPos,\n          scalar * yPos,\n          scalar * SGN[(i + 1) % 4] * fibo[i], // 符号が負の場合，逆方向に正方形を描画\n          scalar * SGN[i % 4] * fibo[i]\n        );\n        // 正方形の位置を符号の配列に従って変える\n        if (i % 2 == 1) {\n          xPos += SGN[i % 4] * (fibo[i] + fibo[i + 1]);\n        } else {\n          yPos += SGN[i % 4] * (fibo[i] + fibo[i + 1]);\n        }\n      }\n    };\n\n    p.setup = () => {\n      p.createCanvas(500, 500);\n      p.colorMode('hsb', 1);\n      _drawSpiral();\n    };\n    p.draw = () => {};\n    p.mouseClicked = () => {\n      const nextFibo = fibo[fibo.length - 2] + fibo[fibo.length - 1];\n      fibo = p.append(fibo, nextFibo);\n      _drawSpiral();\n      console.log(nextFibo);\n    };\n  });\n\n  return '';\n};\n\n/**\n * フィボナッチ長方形の敷き詰めによって正方形を作る\n */\nexport const rect = () => {\n  init('フィボナッチ長方形の敷き詰めによる正方形');\n\n  globalP5Instance = new p5((p: p5) => {\n    let fibo = [0, 1, 1];\n    // フィボナッチ長方形を敷き詰める関数\n    const _drawRect = () => {\n      const SGN = [-1, 1, 1, -1]; // 敷き詰める方向\n      let xPos = 0;\n      let yPos = 0;\n      const scalar = p.width / (2 * fibo[fibo.length - 1]); // 拡大・縮小比率\n      p.background(0, 0, 1);\n      p.translate(p.width / 2, p.height / 2); // 描画ウィンドウ中央に移動\n      for (let i = 1; i < fibo.length - 1; i++) {\n        p.fill((0.1 * i) % 1, 1, 1);\n        p.rect(\n          scalar * xPos,\n          scalar * yPos,\n          scalar * SGN[(i + 1) % 4] * fibo[i - 1], // 横が短辺\n          scalar * SGN[i % 4] * fibo[i]\n        ); // 縦が長辺(次の項のフィボナッチ数)\n        if (i % 2 == 1) {\n          xPos += SGN[i % 4] * (fibo[i - 1] + fibo[i]); // x位置の取り方を変更\n        } else {\n          yPos += SGN[i % 4] * (fibo[i] + fibo[i + 1]);\n        }\n      }\n    };\n\n    p.setup = () => {\n      p.createCanvas(500, 500);\n      p.colorMode('hsb', 1);\n      _drawRect();\n    };\n    p.draw = () => {};\n    p.mouseClicked = () => {\n      const nextFibo = fibo[fibo.length - 2] + fibo[fibo.length - 1];\n      fibo = p.append(fibo, nextFibo);\n      _drawRect();\n      console.log(nextFibo);\n    };\n  });\n\n  return '';\n};\n\n/**\n * 正方形の再帰的なフィボナッチ分割\n */\nexport const recurDiv = () => {\n  init('再帰的なフィボナッチ分割');\n\n  globalP5Instance = new p5((p: p5) => {\n    let num = 10;\n    let thr = 1; // 関数の繰り返し回数に関するしきい値\n    let fibo: number[];\n    const SGN = [1, 1, -1, -1];\n    const _generateFibo = (ind: number) => {\n      fibo = [0, 1];\n      for (let i = 1; i < ind; i++) {\n        fibo = p.append(fibo, fibo[i - 1] + fibo[i]);\n      }\n      fibo = p.reverse(fibo); // 配列の番号付けを逆にする\n    };\n    const _colRect = (\n      xPos: number,\n      yPos: number,\n      wd: number,\n      ht: number,\n      ind: number\n    ) => {\n      const scalar = p.width / fibo[0];\n      p.fill(((ind * 1.0) / num) % 1, 1, 1);\n      p.rect(scalar * xPos, scalar * yPos, scalar * wd, scalar * ht);\n    };\n\n    const _divRect = (\n      xPos: number,\n      yPos: number,\n      ind: number,\n      itr: number,\n      sgnX: number,\n      sgnY: number\n    ) => {\n      for (let i = 0; i < num - ind; i++) {\n        const lng = fibo[i + ind];\n        const newSgnX = sgnX * SGN[(i + 1) % 4];\n        const newSgnY = sgnY * SGN[i % 4];\n        _colRect(xPos, yPos, newSgnX * lng, newSgnY * lng, ind + i);\n        xPos += newSgnX * lng;\n        yPos += newSgnY * lng;\n        if (itr < thr) {\n          _divSquare(xPos, yPos, ind + i, itr + 1, -newSgnX, -newSgnY);\n        }\n      }\n    };\n\n    // 正方形の位置(xPos, yPos)，フィボナッチ数列の項数ind，\n    // 関数の繰り返し回数itr，正方形の描画に関する符号(sgnX,sgnY)を引数とする分割\n    const _divSquare = (\n      xPos: number,\n      yPos: number,\n      ind: number,\n      itr: number,\n      sgnX: number,\n      sgnY: number\n    ) => {\n      // (num-ind)項目のフィボナッチ数(=fibo[ind])を一辺とする正方形を順に分割\n      for (let i = 0; i < num - ind; i++) {\n        // フィボナッチ数列の順序を逆にしているため，iが大きいほどフィボナッチ長方形は小さい\n        const lng0 = fibo[i + ind + 1]; // フィボナッチ長方形の横幅(短辺)\n        const lng1 = fibo[i + ind]; // フィボナッチ長方形の縦幅(長辺)\n        const newSgnX = sgnX * SGN[i % 4]; // 長方形を描画する方向\n        const newSgnY = sgnY * SGN[(i + 1) % 4];\n        _colRect(\n          xPos,\n          yPos, // フィボナッチ長方形の位置\n          newSgnX * lng0,\n          newSgnY * lng1, // フィボナッチ長方形の大きさ\n          ind + i + 1\n        ); // 項数に対応して長方形の色を決定\n        xPos += newSgnX * lng0;\n        yPos += newSgnY * lng1;\n        if (itr < thr) {\n          // 関数の繰り返し回数がしきい値未満ならば長方形をフィボナッチ分割\n          _divRect(\n            xPos,\n            yPos,\n            i + ind + 1, // フィボナッチ長方形の短辺の項数を渡す\n            itr + 1, // 繰り返し回数を1増やして渡す\n            -newSgnX,\n            -newSgnY\n          ); // 敷き詰めの回り込みの向きを逆にする\n        }\n      }\n    };\n    p.setup = () => {\n      p.createCanvas(500, 500);\n      p.colorMode('hsb', 1);\n      p.background(0, 0, 1);\n      _generateFibo(num); // num項目までのフィボナッチ数列を生成\n      _divSquare(0, 0, 0, 0, 1, 1); // 正方形のフィボナッチ分割\n    };\n    p.mouseClicked = () => {\n      num = Math.trunc(p.random(2, 10));\n      thr = Math.trunc(p.random(0, 9));\n      console.log('num =', num, 'thr =', thr);\n      p.background(0, 0, 1);\n      _generateFibo(num);\n      _divSquare(0, 0, 0, 0, 1, 1);\n    };\n  });\n\n  return '';\n};\n\n/**\n * RecurDivのGUIプログラム\n */\nexport const recurDivGUI = () => {\n  init('再帰的なフィボナッチ分割のGUIプログラム');\n\n  globalP5Instance = new p5((p: p5) => {\n    let fibo: number[];\n    const SGN = [1, 1, -1, -1];\n    const controls = {\n      num: 10,\n      thr: 0\n    };\n    const _controller = () => {\n      gui = new GUI();\n      gui.add(controls, 'num', 1, 20);\n      gui.add(controls, 'thr', 0, 9);\n    };\n    const _generateFibo = (ind: number) => {\n      fibo = [0, 1];\n      for (let i = 1; i < ind; i++) {\n        fibo = p.append(fibo, fibo[i - 1] + fibo[i]);\n      }\n      fibo = p.reverse(fibo); // 配列の番号付けを逆にする\n    };\n    const _colRect = (\n      xPos: number,\n      yPos: number,\n      wd: number,\n      ht: number,\n      ind: number\n    ) => {\n      const scalar = p.width / fibo[0];\n      p.fill(((ind * 1.0) / controls.num) % 1, 1, 1);\n      p.rect(scalar * xPos, scalar * yPos, scalar * wd, scalar * ht);\n    };\n    const _divRect = (\n      xPos: number,\n      yPos: number,\n      ind: number,\n      itr: number,\n      sgnX: number,\n      sgnY: number\n    ) => {\n      const { num, thr } = controls;\n      for (let i = 0; i < num - ind; i++) {\n        const lng = fibo[i + ind];\n        const newSgnX = sgnX * SGN[(i + 1) % 4];\n        const newSgnY = sgnY * SGN[i % 4];\n        _colRect(xPos, yPos, newSgnX * lng, newSgnY * lng, ind + i);\n        xPos += newSgnX * lng;\n        yPos += newSgnY * lng;\n        if (itr < thr) {\n          _divSq(xPos, yPos, ind + i, itr + 1, -newSgnX, -newSgnY);\n        }\n      }\n    };\n    const _divSq = (\n      posX: number,\n      posY: number,\n      ind: number,\n      itr: number,\n      sgnX: number,\n      sgnY: number\n    ) => {\n      const { num, thr } = controls;\n      for (let i = 0; i < num - ind; i++) {\n        const lng0 = fibo[i + ind + 1]; // 小さい方の数\n        const lng1 = fibo[i + ind]; // 大きい方の数\n        const newSgnX = sgnX * SGN[i % 4];\n        const newSgnY = sgnY * SGN[(i + 1) % 4];\n        _colRect(posX, posY, newSgnX * lng0, newSgnY * lng1, ind + i + 1);\n        posX += newSgnX * lng0;\n        posY += newSgnY * lng1;\n        if (itr < thr) {\n          _divRect(posX, posY, ind + i + 1, itr + 1, -newSgnX, -newSgnY);\n        }\n      }\n    };\n    p.setup = () => {\n      p.createCanvas(500, 500);\n      _controller();\n    };\n    p.draw = () => {\n      _generateFibo(controls.num);\n      p.colorMode('hsb', 1);\n      p.background(0, 0, 1);\n      _divSq(0, 0, 0, 0, 1, 1);\n    };\n  });\n\n  return '';\n};\n\n/**\n * フィボナッチらせんを描く\n */\nexport const spiral = () => {\n  init('フィボナッチらせんを描く');\n\n  globalP5Instance = new p5((p: p5) => {\n    let fibo = [0, 1, 1];\n    const SGN = [-1, 1, 1, -1]; // 敷き詰める方向\n    const _drawSpiral = () => {\n      let xPos = 0;\n      let yPos = 0;\n      const scalar = p.width / (2 * fibo[fibo.length - 1]); // 拡大・縮小比率\n      p.background(0, 0, 1);\n      p.translate(p.width / 2, p.height / 2); // 描画ウィンドウ中央に移動\n      for (let i = 1; i < fibo.length - 1; i++) {\n        p.stroke(0, 0, 0);\n        p.rect(\n          scalar * xPos,\n          scalar * yPos,\n          scalar * SGN[(i + 1) % 4] * fibo[i],\n          scalar * SGN[i % 4] * fibo[i]\n        );\n        p.stroke(0, 1, 1);\n        p.arc(\n          scalar * (xPos + SGN[(i + 1) % 4] * fibo[i]), // 円の中心のx座標\n          scalar * (yPos + SGN[i % 4] * fibo[i]), // 円の中心のy座標\n          scalar * 2 * fibo[i], // 楕円の縦の直径\n          scalar * 2 * fibo[i], // 楕円の横の直径(正円のため縦と同じ)\n          ((1 + i) * p.PI) / 2, // 円弧の開始位置(ラジアン)\n          ((2 + i) * p.PI) / 2\n        ); // 円弧の終了位置\n        if (i % 2 == 1) {\n          xPos += SGN[i % 4] * (fibo[i] + fibo[i + 1]);\n        } else {\n          yPos += SGN[i % 4] * (fibo[i] + fibo[i + 1]);\n        }\n      }\n    };\n    p.setup = () => {\n      p.createCanvas(500, 500);\n      p.colorMode('hsb', 1);\n      _drawSpiral();\n    };\n    p.draw = () => {};\n    p.mouseClicked = () => {\n      const nextFibo = fibo[fibo.length - 2] + fibo[fibo.length - 1];\n      fibo = p.append(fibo, nextFibo);\n      _drawSpiral();\n      console.log(nextFibo);\n    };\n  });\n\n  return '';\n};\n"],"names":["convergent","init","p5","p","x","alpha","limPos","step","i","nextX","pos","nextPos","square","fibo","_drawSquare","xPos","yPos","nextFibo","scalar","squareSpiral","_drawSpiral","SGN","rect","_drawRect","recurDiv","num","thr","_generateFibo","ind","_colRect","wd","ht","_divRect","itr","sgnX","sgnY","lng","newSgnX","newSgnY","_divSquare","lng0","lng1","recurDivGUI","controls","_controller","GUI","_divSq","posX","posY","spiral"],"mappings":"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"}
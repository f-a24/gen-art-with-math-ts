{"version":3,"file":"chapter01-06481f44.js","sources":["../../src/chapter01.ts"],"sourcesContent":["import p5 from 'p5';\nimport dat from 'dat.gui';\nimport { init } from './common';\n\n/**\n * aとbに対してユークリッド互除法を行う\n */\nexport const numeric = () => {\n  init('ユークリッド互除法の計算を行う');\n\n  globalP5Instance = new p5((p: p5) => {\n    p.setup = () => {\n      p.createCanvas(850, 170);\n\n      // 課題\n      const exercise = [\n        [10, 6],\n        [6, 9],\n        [6, 15],\n        [21, 17],\n        [18, 20]\n      ];\n\n      // 課題を繰り返す\n      exercise.forEach((e, i) => {\n        let a = e[0];\n        let b = e[1];\n        let c: number; // 商のための変数\n        let d = b; // 余りのための変数\n        let itr = 0; // 繰り返しの回数\n\n        p.textSize(20);\n        p.text(`a = ${a}, b = ${b}`, i * 170, 30);\n        p.textSize(16);\n\n        // 繰り返し処理\n        while (d > 0) {\n          // 余りが0以上のとき以下の処理を実行\n          itr++; // 繰り返し回数を1増やす\n          c = (a / b) | 0; // cに商を代入\n          d = a % b; // dに余りを代入\n          p.text(`${itr} : ${a} / ${b} = ${c}...${d}`, i * 170, itr * 30 + 30); // 計算結果を表示\n          a = b; // aにbを代入\n          b = d; // bに余りを代入\n        }\n        p.textSize(20);\n        p.text(`GCD is ${a}`, i * 170, (itr + 1) * 30 + 30); // 最大公約数を表示\n      });\n    };\n  });\n  return '';\n};\n\n/**\n * 長方形の分割によるユークリッド互除法の可視化\n */\nexport const divRect = () => {\n  init('長方形の分割によるユークリッド互除法の可視化');\n\n  globalP5Instance = new p5((p: p5) => {\n    p.setup = () => {\n      p.createCanvas(500, 500);\n\n      // 横縦比がnumA:numBの長方形を正方形によって分割\n      const scalar = 50; // 長方形の拡大倍率\n      const numA = 10 * scalar; // 数値の大きさを拡大\n      const numB = 6 * scalar;\n\n      // プログラム実行中に動く変数\n      let wd = numB; // 分割に使う正方形の幅の大きさ(初期値numB)\n      let xPos = 0; // 正方形のx位置(初期値0)\n      let yPos = 0; // 正方形のy位置(初期値0)\n      let itr = 0; // 分割の繰り返し回数(初期値0)\n\n      // 繰り返し処理\n      while (wd > 0) {\n        // 幅が0になるまで以下を実行\n        itr++; // 繰り返し回数を1増やす\n        if (itr % 2 === 1) {\n          // 繰り返し回数が奇数のとき，x軸方向へ正方形を増やす\n          while (xPos + wd <= numA) {\n            // 幅を足したとき，長方形を超えなければ以下を実行\n            p.rect(xPos, yPos, wd, wd); // (xPos, yPos)を左上の頂点とする1辺wdの正方形を描画\n            xPos += wd; // x位置を更新\n          }\n          wd = numA - xPos; // 幅を更新\n        } else {\n          // 繰り返し回数が偶数のとき，y軸方向へ正方形を加える\n          while (yPos + wd <= numB) {\n            // 幅を足したとき，長方形を超えなければ以下を実行\n            p.rect(xPos, yPos, wd, wd); // (xPos, yPos)を左上の頂点とする1辺wdの正方形を描画\n            yPos += wd; // y位置を更新\n          }\n          wd = numB - yPos; // 幅を更新\n        }\n      }\n    };\n  });\n  return '';\n};\n\n/**\n * divRectを着彩したもの\n */\nexport const divRectColor = () => {\n  init('Div Rectを着彩したもの');\n\n  globalP5Instance = new p5((p: p5) => {\n    p.setup = () => {\n      p.createCanvas(500, 500);\n\n      // 横縦比がnumA:numBの長方形を正方形によって分割\n      const scalar = 50; // 長方形の拡大倍率\n      const numA = 10 * scalar; // 数値の大きさを拡大\n      const numB = 6 * scalar;\n\n      // プログラム実行中に動く変数\n      let wd = numB; // 分割に使う正方形の幅の大きさ(初期値numB)\n      let xPos = 0; // 正方形のx位置(初期値0)\n      let yPos = 0; // 正方形のy位置(初期値0)\n      let itr = 0; // 分割の繰り返し回数(初期値0)\n      let col: p5.Color; // 色のための変数\n      p.colorMode('hsb', 1); // 01区間をパラメータとするHSB色形式を使用\n\n      // 繰り返し処理\n      while (wd > 0) {\n        // 幅が0になるまで以下を実行\n        itr++; // 繰り返し回数を1増やす\n        if (itr % 2 === 1) {\n          // 繰り返し回数が奇数のとき，x軸方向へ正方形を増やす\n          while (xPos + wd <= numA) {\n            // 幅を足したとき，長方形を超えなければ以下を実行\n            col = p.color(p.random(1), 1, 1); // 色相のみを01区間でランダムに変える\n            p.fill(col);\n            p.rect(xPos, yPos, wd, wd); // (xPos, yPos)を左上の頂点とする1辺wdの正方形を描画\n            xPos += wd; // x位置を更新\n          }\n          wd = numA - xPos; // 幅を更新\n        } else {\n          // 繰り返し回数が偶数のとき，y軸方向へ正方形を加える\n          while (yPos + wd <= numB) {\n            // 幅を足したとき，長方形を超えなければ以下を実行\n            col = p.color(p.random(1), 1, 1);\n            p.fill(col);\n            p.rect(xPos, yPos, wd, wd); // (xPos, yPos)を左上の頂点とする1辺wdの正方形を描画\n            yPos += wd; // y位置を更新\n          }\n          wd = numB - yPos; // 幅を更新\n        }\n      }\n    };\n  });\n  return '';\n};\n\n/**\n * 正方形の分割によるユークリッド互除法の可視化\n */\nexport const divSquare = () => {\n  init('長方形による正方形の分割');\n\n  globalP5Instance = new p5((p: p5) => {\n    p.setup = () => {\n      p.createCanvas(500, 500);\n      p.colorMode('hsb', 1);\n\n      // 縦横比がnumA:numBの長方形によって正方形の描画ウィンドウを分割\n      const numA = 16;\n      const numB = 7;\n      const ratio = numB / numA; // 比率\n\n      let xPos = 0;\n      let yPos = 0;\n      let itr = 0;\n      let wd = p.width; // 描画ウィンドウの横幅サイズを初期値とする\n\n      // 繰り返し処理\n      while (wd > 0) {\n        itr++;\n        if (itr % 2 === 1) {\n          // 繰り返し回数が奇数のとき，x軸方向へ正方形を増やす\n          while (xPos + wd * ratio < p.width + 0.1) {\n            // 幅を足したとき，横幅がウィンドウを超えなければ以下の処理を実行\n            p.fill(p.color(p.random(1), 1, 1));\n            p.rect(xPos, yPos, wd * ratio, wd); // (xPos, yPos)を左上の頂点とする1辺wdの正方形を描画\n            xPos += wd * ratio; // x位置を更新\n          }\n          wd = p.width - xPos;\n        } else {\n          // 横幅がwdの長方形をy軸方向へ加える\n          while (yPos + wd / ratio < p.width + 0.1) {\n            // 幅を足したとき，縦幅がウィンドウを超えなければ以下の処理を実行\n            p.fill(p.color(p.random(1), 1, 1));\n            p.rect(xPos, yPos, wd, wd / ratio); // 横幅wd，縦横比がnumA:numBの長方形\n            yPos += wd / ratio; // y位置を更新\n          }\n          wd = p.width - yPos; // 幅を更新\n        }\n      }\n    };\n  });\n  return '';\n};\n\n/**\n * 長方形の長方形による分割\n */\nexport const rectDivRect = () => {\n  init('長方形の長方形による分割');\n\n  globalP5Instance = new p5((p: p5) => {\n    const numA = 10;\n    const numB = 6;\n    const ratio = numB / numA;\n\n    /**\n     * 位置(xPos,yPos)にある1辺がwdの正方形を縦横比がnumA:numBの長方形で分割する\n     */\n    const _divSquare = (xPos: number, yPos: number, wd: number) => {\n      //この関数内だけのローカル変数\n      let itr = 0;\n      const xEndPos = wd + xPos; //正方形の右下の頂点のx座標\n      const yEndPos = wd + yPos; //正方形の右下の頂点のy座標\n      //繰り返し処理\n      while (wd > 0.1) {\n        itr++;\n        if (itr % 2 == 1) {\n          while (xPos + wd * ratio < xEndPos + 0.1) {\n            //ratioはグローバル変数\n            p.fill(p.color(p.random(1), 1, 1));\n            p.rect(xPos, yPos, wd * ratio, wd);\n            xPos += wd * ratio;\n          }\n          wd = xEndPos - xPos;\n        } else {\n          while (yPos + wd / ratio < yEndPos + 0.1) {\n            p.fill(p.color(p.random(1), 1, 1));\n            p.rect(xPos, yPos, wd, wd / ratio);\n            yPos += wd / ratio;\n          }\n          wd = yEndPos - yPos;\n        }\n      }\n    };\n\n    p.setup = () => {\n      p.createCanvas(500, 500);\n      p.colorMode('hsb', 1);\n\n      let itr = 0;\n      let xPos = 0;\n      let yPos = 0;\n      let wd = p.width * ratio;\n\n      while (wd > 0.1) {\n        itr++;\n        if (itr % 2 == 1) {\n          while (xPos + wd < p.width + 0.1) {\n            _divSquare(xPos, yPos, wd); // 正方形を分割する関数の呼び出し\n            xPos += wd;\n          }\n          wd = p.width - xPos;\n        } else {\n          while (yPos + wd < p.width * ratio + 0.1) {\n            _divSquare(xPos, yPos, wd); // 正方形を分割する関数の呼び出し\n            yPos += wd;\n          }\n          wd = p.width * ratio - yPos;\n        }\n      }\n    };\n  });\n  return '';\n};\n\n/**\n * 正方形の再帰的な分割\n */\nexport const recurDivSquare = () => {\n  init('正方形の再帰的な分割');\n\n  globalP5Instance = new p5((p: p5) => {\n    let numA = 10;\n    let numB = 6;\n    let ratio = numB / numA;\n    let thr = 160; // しきい値\n\n    /**\n     * 位置(xPos,yPos)にある横幅wdで縦横比がnumA:numBの長方形を正方形によって分割する\n     */\n    const _divRect = (xPos: number, yPos: number, wd: number) => {\n      let itr = 0;\n      const xEndPos = xPos + wd;\n      const yEndPos = yPos + wd / ratio;\n      p.fill(p.color(p.random(1), 1, 1));\n      p.rect(xPos, yPos, wd, wd / ratio);\n      while (wd > thr) {\n        // 長方形の幅がしきい値以上の場合に処理を行う\n        itr++;\n        if (itr % 2 == 0) {\n          while (xPos + wd < xEndPos + 0.1) {\n            _divSquare(xPos, yPos, wd); //正方形を分割する関数の呼び出し\n            xPos += wd;\n          }\n          wd = xEndPos - xPos;\n        } else {\n          while (yPos + wd < yEndPos + 0.1) {\n            _divSquare(xPos, yPos, wd); //正方形を分割する関数の呼び出し\n            yPos += wd;\n          }\n          wd = yEndPos - yPos;\n        }\n      }\n    };\n\n    /**\n     * 位置(xPos,yPos)にある1辺がwdの正方形を縦横比がnumA:numBの長方形で分割する\n     */\n    const _divSquare = (xPos: number, yPos: number, wd: number) => {\n      let itr = 0;\n      const xEndPos = wd + xPos;\n      const yEndPos = wd + yPos;\n      p.fill(p.color(p.random(1), 1, 1));\n      p.rect(xPos, yPos, wd, wd);\n      while (wd > thr) {\n        //wdがしきい値以上の場合に処理を行う\n        itr++;\n        if (itr % 2 == 1) {\n          while (xPos + wd * ratio < xEndPos + 0.1) {\n            _divRect(xPos, yPos, wd * ratio); //長方形を分割する関数の呼び出し\n            xPos += wd * ratio;\n          }\n          wd = xEndPos - xPos;\n        } else {\n          while (yPos + wd / ratio < yEndPos + 0.1) {\n            _divRect(xPos, yPos, wd); //長方形を分割する関数の呼び出し\n            yPos += wd / ratio;\n          }\n          wd = yEndPos - yPos;\n        }\n      }\n    };\n\n    p.setup = () => {\n      p.createCanvas(500, 500);\n      p.colorMode('hsb', 1);\n      _divSquare(0, 0, p.width); //正方形の分割\n    };\n\n    p.mouseClicked = () => {\n      numA = Math.trunc(p.random(1, 20)); //1以上20以下のランダムな整数を代入\n      numB = Math.trunc(p.random(1, 20));\n      while (numA === numB) {\n        //numAとnumBが異なるようにする\n        numB = Math.trunc(p.random(1, 20));\n      }\n      thr = Math.trunc(p.random(10, 300));\n      console.log('numA =', numA, 'numB =', numB, 'thr =', thr); //numA,numB,thrの値を表示\n      ratio = numA / numB;\n      p.background(0, 0, 1); //背景を白で消去\n      p.fill(0, 0, 0);\n      _divSquare(0, 0, p.width);\n    };\n  });\n  return '';\n};\n\n/**\n * recurDivSquareのGUIプログラム\n */\nexport const recurDivSquareGUI = () => {\n  init('Recur Div SquareのGUIプログラム');\n\n  globalP5Instance = new p5((p: p5) => {\n    const controls = {\n      numA: 10,\n      numB: 6,\n      thr: 100,\n      changeColor() {\n        for (let i = 0; i < rand.length; i++) {\n          rand[i] = p.random(1);\n        }\n      }\n    };\n    let ratio = controls.numA / controls.numB;\n    let rand = [0]; //ランダムな数値を格納する配列\n    let count = 0;\n\n    const _setColor = () => {\n      if (rand.length <= count) {\n        rand = p.append(rand, p.random(1));\n      }\n      p.fill(p.color(rand[count], 1, 1));\n      count++;\n    };\n\n    /**\n     * 位置(xPos,yPos)にある横幅wdで縦横比がnumA:numBの長方形を正方形によって分割する\n     */\n    const _divRect = (xPos: number, yPos: number, wd: number) => {\n      let itr = 0;\n      const xEndPos = xPos + wd;\n      const yEndPos = yPos + wd / ratio;\n      _setColor();\n      p.rect(xPos, yPos, wd, wd / ratio);\n      while (wd > controls.thr) {\n        // 長方形の幅がしきい値以上の場合に処理を行う\n        itr++;\n        if (itr % 2 == 0) {\n          while (xPos + wd < xEndPos + 0.1) {\n            _divSquare(xPos, yPos, wd); //正方形を分割する関数の呼び出し\n            xPos += wd;\n          }\n          wd = xEndPos - xPos;\n        } else {\n          while (yPos + wd < yEndPos + 0.1) {\n            _divSquare(xPos, yPos, wd); //正方形を分割する関数の呼び出し\n            yPos += wd;\n          }\n          wd = yEndPos - yPos;\n        }\n      }\n    };\n\n    /**\n     * 位置(xPos,yPos)にある1辺がwdの正方形を縦横比がnumA:numBの長方形で分割する\n     */\n    const _divSquare = (xPos: number, yPos: number, wd: number) => {\n      let itr = 0;\n      const xEndPos = wd + xPos;\n      const yEndPos = wd + yPos;\n      _setColor();\n      p.rect(xPos, yPos, wd, wd);\n      while (wd > controls.thr) {\n        //wdがしきい値以上の場合に処理を行う\n        itr++;\n        if (itr % 2 == 1) {\n          while (xPos + wd * ratio < xEndPos + 0.1) {\n            _divRect(xPos, yPos, wd * ratio); //長方形を分割する関数の呼び出し\n            xPos += wd * ratio;\n          }\n          wd = xEndPos - xPos;\n        } else {\n          while (yPos + wd / ratio < yEndPos + 0.1) {\n            _divRect(xPos, yPos, wd); //長方形を分割する関数の呼び出し\n            yPos += wd / ratio;\n          }\n          wd = yEndPos - yPos;\n        }\n      }\n    };\n\n    const _controller = () => {\n      gui = new dat.GUI();\n      gui.add(controls, 'numA', 1, 40, 1);\n      gui.add(controls, 'numB', 1, 40, 1);\n      gui.add(controls, 'thr', 10, 300, 30);\n      gui.add(controls, 'changeColor');\n    };\n\n    p.setup = () => {\n      p.createCanvas(500, 500);\n      p.colorMode('hsb', 1);\n      _controller();\n    };\n\n    p.draw = () => {\n      p.background(1, 0, 1);\n      ratio = controls.numB / controls.numA;\n      count = 0;\n      if (ratio !== 1) {\n        // numAとnumBが異なるとき実行\n        _divSquare(0, 0, p.width);\n      }\n    };\n  });\n  return '';\n};\n"],"names":["numeric","init","p5","p","e","i","a","b","d","itr","divRect","scalar","numA","numB","wd","xPos","yPos","divRectColor","col","divSquare","ratio","rectDivRect","_divSquare","xEndPos","yEndPos","recurDivSquare","thr","_divRect","recurDivSquareGUI","controls","rand","count","_setColor","_controller","dat"],"mappings":"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"}